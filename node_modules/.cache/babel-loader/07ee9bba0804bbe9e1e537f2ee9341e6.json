{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burak\\\\Desktop\\\\ChatApplication-main\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    var user = {\n      username: userData.username,\n      password: userData.password\n    };\n    stompClient.subscribe('/client/registerOrLogin', onRegisterOrLogin);\n    console.log(stompClient.send('/app/registerOrLogin', {}, JSON.stringify(user)));\n\n    if (stompClient.send('/app/registerOrLogin', {}, JSON.stringify(user))) {\n      setUserData({ ...userData,\n        \"connected\": true\n      });\n      stompClient.subscribe('/chatroom/public', onMessageReceived);\n      stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n      userJoin();\n    } else {\n      console.log(\"olmadÄ±\");\n    } //stompClient.send('/app/kekw',{},\"null\");\n\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onRegisterOrLogin = payload => {\n    var payloadData = Json.parse(payload.body);\n    console.log(payloadData);\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const handlePassword = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"password\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 44\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 37\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"user-name\",\n            placeholder: \"Enter your username\",\n            name: \"userName\",\n            value: userData.username,\n            onChange: handleUsername,\n            margin: \"normal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            placeholder: \"Enter your password\",\n            name: \"password\",\n            value: userData.password,\n            onChange: handlePassword,\n            margin: \"normal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: registerUser,\n            children: \"connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatRoom, \"LCXFSbWL0Xpcn6nILPUD07f+iEY=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/burak/Desktop/ChatApplication-main/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","onError","user","password","subscribe","onRegisterOrLogin","send","JSON","stringify","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","payload","payloadData","Json","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","handlePassword","registerUser","keys","map","name","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n    });\n    useEffect(() => {\n        console.log(userData);\n    }, [userData]);\n\n    const connect = () => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, onConnected, onError);\n    }\n\n    const onConnected = () => {\n        var user = {\n            username: userData.username,\n            password: userData.password\n        };\n        stompClient.subscribe('/client/registerOrLogin', onRegisterOrLogin);\n        console.log(stompClient.send('/app/registerOrLogin',{},JSON.stringify(user)));\n        if(stompClient.send('/app/registerOrLogin',{},JSON.stringify(user))){\n            setUserData({ ...userData, \"connected\": true });\n            stompClient.subscribe('/chatroom/public', onMessageReceived);\n            stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n            userJoin();\n        }else{\n            console.log(\"olmadÄ±\")\n        }\n       \n        //stompClient.send('/app/kekw',{},\"null\");\n        \n        \n    }\n    const userJoin = () => {\n        var chatMessage = {\n            senderName: userData.username,\n            status: \"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n    const onRegisterOrLogin = (payload) => {\n        var payloadData= Json.parse(payload.body);\n        console.log(payloadData);\n    }\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                if (!privateChats.get(payloadData.senderName)) {\n                    privateChats.set(payloadData.senderName, []);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n\n    const onPrivateMessage = (payload) => {\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if (privateChats.get(payloadData.senderName)) {\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        } else {\n            let list = [];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName, list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const onError = (err) => {\n        console.log(err);\n\n    }\n\n    const handleMessage = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, \"message\": value });\n    }\n    const sendValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n            console.log(chatMessage);\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, \"message\": \"\" });\n        }\n    }\n\n    const sendPrivateValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName: tab,\n                message: userData.message,\n                status: \"MESSAGE\"\n            };\n\n            if (userData.username !== tab) {\n                privateChats.get(tab).push(chatMessage);\n                setPrivateChats(new Map(privateChats));\n            }\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            setUserData({ ...userData, \"message\": \"\" });\n        }\n    }\n\n    const handleUsername = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, \"username\": value });\n    }\n\n    const handlePassword = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, \"password\": value });\n    }\n\n    const registerUser = () => {\n        \n        connect();\n    }\n    return (\n        <div className=\"container\">\n            {userData.connected ?\n                <div className=\"chat-box\">\n                    <div className=\"member-list\">\n                        <ul>\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                            {[...privateChats.keys()].map((name, index) => (\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\n                            ))}\n                        </ul>\n                    </div>\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\n                        <ul className=\"chat-messages\">\n                            {publicChats.map((chat, index) => (\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                    <div className=\"message-data\">{chat.message}</div>\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                </li>\n                            ))}\n                        </ul>\n\n                        <div className=\"send-message\">\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                        </div>\n                    </div>}\n                    {tab !== \"CHATROOM\" && <div className=\"chat-content\">\n                        <ul className=\"chat-messages\">\n                            {[...privateChats.get(tab)].map((chat, index) => (\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                    <div className=\"message-data\">{chat.message}</div>\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                </li>\n                            ))}\n                        </ul>\n\n                        <div className=\"send-message\">\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                        </div>\n                    </div>}\n                </div>\n                :\n                <div className=\"register\">\n                    <form>\n                        <div>\n                            <input\n                                type=\"text\"\n                                id=\"user-name\"\n                                placeholder=\"Enter your username\"\n                                name=\"userName\"\n                                value={userData.username}\n                                onChange={handleUsername}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                placeholder=\"Enter your password\"\n                                name=\"password\"\n                                value={userData.password}\n                                onChange={handlePassword}\n                                margin=\"normal\"\n                            />\n                        </div>\n                        <div>\n                            <button type=\"button\" onClick={registerUser}>\n                                connect\n                            </button>\n                        </div>\n\n                    </form>\n                </div>}\n        </div>\n    )\n}\n\nexport default ChatRoom\n"]},"metadata":{},"sourceType":"module"}